"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[5237],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},s="Supporting Infrastructure Deployment",i={unversionedId:"kits/tractusx-edc/edc-tests/deployment/test-infrastructure/README",id:"kits/tractusx-edc/edc-tests/deployment/test-infrastructure/README",title:"Supporting Infrastructure Deployment",description:"The Supporting Infrastructure Deployment creates a complete, independent and already configured EDC test environment.",source:"@site/docs/kits/tractusx-edc/edc-tests/deployment/test-infrastructure/README.md",sourceDirName:"kits/tractusx-edc/edc-tests/deployment/test-infrastructure",slug:"/kits/tractusx-edc/edc-tests/deployment/test-infrastructure/",permalink:"/docs/kits/tractusx-edc/edc-tests/deployment/test-infrastructure/",draft:!1,editUrl:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io/tree/main/docs/kits/tractusx-edc/edc-tests/deployment/test-infrastructure/README.md",tags:[],version:"current",frontMatter:{},sidebar:"kits",previous:{title:"Omejdn DAPS",permalink:"/docs/kits/tractusx-edc/edc-tests/deployment/omejdn/"},next:{title:"Postman Collection",permalink:"/docs/kits/tractusx-edc/docs/development/postman/"}},c={},l=[{value:"Omejdn DAPS",id:"omejdn-daps",level:2},{value:"HashiCorp Vault",id:"hashicorp-vault",level:2},{value:"PostgreSQL",id:"postgresql",level:2},{value:"Setup",id:"setup",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"supporting-infrastructure-deployment"},"Supporting Infrastructure Deployment"),(0,a.kt)("p",null,"The Supporting Infrastructure Deployment creates a complete, independent and already configured EDC test environment.\nDuring the automated business tests, these infrastructure components are deployed together with two connectors (Plato & Sokrates)."),(0,a.kt)("p",null,"This deployment could also be used as"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"reference setup for teams, that want to create their own connector"),(0,a.kt)("li",{parentName:"ul"},"standalone infrastructure to try things out")),(0,a.kt)("p",null,"This deployment should ",(0,a.kt)("strong",{parentName:"p"},"never")," be used"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("strong",{parentName:"li"},"any")," production or near production environments"),(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("strong",{parentName:"li"},"any")," long living internet facing connector setups")),(0,a.kt)("h2",{id:"omejdn-daps"},"Omejdn DAPS"),(0,a.kt)("p",null,"The Dynamic Attribute Provisioning Service (DAPS) is a component of the IDS Ecosystem.\nThe Fraunhofer Institute has created a DAPS reference implementation, the Omejdn\nDAPS (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Fraunhofer-AISEC/omejdn-server"},"link"),"). This deplyoment configures and deployes a instance of\nthis reference implementation."),(0,a.kt)("p",null,"Definition of DAPS from the IDS Reference architecture v3.0:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The Identity Provider acts as an agent for the International\nData Spaces Association. It is responsible for issuing technical identities to parties that have been approved to become\nParticipants in the International Data Spaces. The Identity\nProvider is instructed to issue identities based on approved\nroles (e.g., App Store or App Provider). Only if equipped with\nsuch an identity, an entity is allowed to participate in the International Data Spaces")),(0,a.kt)("p",null,"Also, please note, that the Omejdn DAPS is meant as research sandbox and should not be used in anq\nproductive environment."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"IMPORTANT:")," Omejdn is meant to be a research sandbox in which we can (re)implement standard protocols and\npotentially extend and modify functionality under the hood to support research projects. Use at your own\nrisk! (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Fraunhofer-AISEC/omejdn-server"},"source"),")")),(0,a.kt)("h2",{id:"hashicorp-vault"},"HashiCorp Vault"),(0,a.kt)("p",null,"The Control- and Data Plane persist confidential in the vault and persist and communicate using only the secret\nnames. Hence, it is not possible to run a connector without an instance of a vault."),(0,a.kt)("h2",{id:"postgresql"},"PostgreSQL"),(0,a.kt)("p",null,"This database is used to persist the state of the Control Plane."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Simply execute the following comment in a shell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"helm install infra edc-tests/deployment/src/main/resources/helm/test-infrastructure --update-dependencies\n")))}p.isMDXComponent=!0}}]);