"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[68792],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>f});var a=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function s(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?s(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)i=s[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)i=s[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(i),u=n,f=p["".concat(l,".").concat(u)]||p[u]||h[u]||s;return i?a.createElement(f,o(o({ref:t},d),{},{components:i})):a.createElement(f,o({ref:t},d))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=i.length,o=new Array(s);o[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:n,o[1]=r;for(var c=2;c<s;c++)o[c]=i[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},22359:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=i(87462),n=(i(67294),i(3905));const s={id:"Specification Digital Twin Kit",title:"Developing with the DT Kit",description:"Digital Twin Kit",sidebar_position:4},o=void 0,r={unversionedId:"kits/Digital Twin Kit/Software Development View/Specification Digital Twin Kit",id:"kits/Digital Twin Kit/Software Development View/Specification Digital Twin Kit",title:"Developing with the DT Kit",description:"Digital Twin Kit",source:"@site/docs-kits/kits/Digital Twin Kit/Software Development View/page_software-development-view.md",sourceDirName:"kits/Digital Twin Kit/Software Development View",slug:"/kits/Digital Twin Kit/Software Development View/Specification Digital Twin Kit",permalink:"/docs-kits/next/kits/Digital Twin Kit/Software Development View/Specification Digital Twin Kit",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"Specification Digital Twin Kit",title:"Developing with the DT Kit",description:"Digital Twin Kit",sidebar_position:4},sidebar:"kits",previous:{title:"Operation View",permalink:"/docs-kits/next/kits/Digital Twin Kit/Operation View Digital Twin Kit"},next:{title:"Introduction",permalink:"/docs-kits/next/kits/Digital Twin Kit/Software Development View/API AAS Discovery/dotaas-part-2-http-rest-discovery-service-specification"}},l={},c=[{value:"API Specifications",id:"api-specifications",level:2},{value:"Asset Administration Shell",id:"asset-administration-shell",level:3},{value:"Submodels",id:"submodels",level:4},{value:"Digital Twin Registry",id:"digital-twin-registry",level:4},{value:"Catena-X specific Services",id:"catena-x-specific-services",level:3},{value:"Sample Data",id:"sample-data",level:2},{value:"Registration at EDC",id:"registration-at-edc",level:3},{value:"Digital Twin Registry as EDC Data Asset",id:"digital-twin-registry-as-edc-data-asset",level:4},{value:"Submodel as EDC Data Asset",id:"submodel-as-edc-data-asset",level:4},{value:"Registration at Digital Twin Registry",id:"registration-at-digital-twin-registry",level:3},{value:"Data Provisioning",id:"data-provisioning",level:2},{value:"Patterns",id:"patterns",level:3},{value:"Register Digital Twins",id:"register-digital-twins",level:3}],d={toc:c};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"api-specifications"},"API Specifications"),(0,n.kt)("p",null,"All openAPI-specifications for the Digital Twin Kit services are rendered in the section ",(0,n.kt)("a",{parentName:"p",href:"API%20Specs"},"of these docs")),(0,n.kt)("h3",{id:"asset-administration-shell"},"Asset Administration Shell"),(0,n.kt)("p",null,"The Asset Administration Shell (AAS) is a specification that is released by the Industrial Digital Twin Association\n",(0,n.kt)("a",{parentName:"p",href:"https://industrialdigitaltwin.org/"},"(IDTA)")," with a perspective to be adopted by the International Electrotechnical\nCommission ",(0,n.kt)("a",{parentName:"p",href:"https://www.iec.ch/homepage"},"(IEC)"),".\nIts mission is defining how \u201cinformation about assets ","[\u2026]"," can be exchanged in a meaningful way between partners in a value\ncreation network\u201d. As such, it is well-suited to contribute to the toolbox of Catena-X. While the Spec offers an extensive\nsuite of meta-model elements and APIs, Catena-X only uses a small subset. What exactly is defined in the Catena-X standard\nCX - 0002."),(0,n.kt)("h4",{id:"submodels"},"Submodels"),(0,n.kt)("p",null,"An Asset Administration Shell is organized in Submodels. Each Submodel represents a self-contained aspect of an asset -\ntypical examples are the Nameplate or AssemblyPartRelationship (which denotes the hierarchical composition of parts into\na whole). As different aspects of an Asset may be known to different parties on the value-chain, Submodels for a single asset\nmust be capable to run independently of each other. The specification explicitly allows this. Catena-X demands that Data\nProviders offer only a subset of the SubmodelServiceSpecification - namely the ",(0,n.kt)("inlineCode",{parentName:"p"},"$value")," serialization. This is an abbreviated\nnotation of an AAS-Submodel that is focused on data instead of context. While it is advisable to expose Submodels with help of\na full-fletched AAS-server SDK that provides the content-modifiers and API-endpoints out-of-the-box, this is not yet\nmandatory."),(0,n.kt)("h4",{id:"digital-twin-registry"},"Digital Twin Registry"),(0,n.kt)("p",null,'What Catena-X calls the "Digital Twin Registry" (DTR) is actually the union of two different services that the AAS specification\nhas specified. For the sake of simplicity, they are both defined in a single service. The DTR serves a similar function as the\nindex in a book: When trying to discover information, it\'s convenient to have an overview WHAT one will find and HOW to\naccess it. The registry caters exactly that information: For every asset it knows, it holds a number of Submodel Descriptors and in\nthese, a consumer app will find information WHAT it will find (via the semanticId) and how to access the information (endpoint,\nsecurity setup etc.). As the information contained in the DTR may be sensitive and not be trusted with a central entity,\nevery data provider must offer his own DTR as an EDC Data Asset.'),(0,n.kt)("h3",{id:"catena-x-specific-services"},"Catena-X specific Services"),(0,n.kt)("p",null,"DTRs hold sensitive information: a SubmodelDescriptor may not give access to the actual Submodel-data but all in cumulo hint at\nproduction volumes as each Twin represents an asset. Therefore, Catena-X implements decentral DTRs (DDTR), each running with a\nbusiness partner. ",(0,n.kt)("a",{parentName:"p",href:"https://industrialdigitaltwin.org/en/wp-content/uploads/sites/2/2023/06/Decentralized-Registries-Taxonomy-of-decentralized-registries-and-an-architectural-overview_.pdf"},"In an IDTA-Whitepaper"),",\nseveral high-level concepts for DDTRs are introduced. The AAS-specification remains agnostic to the approaches and endorses\nnone of them. Catena-X must deal with the additional complexity that stems from the interaction with the EDC."),(0,n.kt)("p",null,"Leveraging the native capabilities of the EDC and the EDC Discovery Service, Catena-X uses a discovery pattern that has the\nsame capability as a central ",(0,n.kt)("a",{parentName:"p",href:"#digital-twin-registry"},"Digital Twin Registry"),": It allows to start a Discovery Process with only an AssetId and\nAs none of the options fit the data-space-specific requirements of Catena-X entirely, yet a different approach is implemented:\nHowever, in Catena-X some of the data is deemed so sensitive that a central authority can't be\ntrusted with it. Thus, each Data Provider will run their own DTR which poses a challenge for discovery. After all, a\nData Consumer must still find out the address where to fetch the data from. That's why Catena-X has introduced a\nthree-step discovery pattern made up of the central microservices Discovery Finder, BPN Discovery (or several of them)\nand finally the EDC discovery that is part of the CX-Portal. They are also part of this Kit."),(0,n.kt)("h2",{id:"sample-data"},"Sample Data"),(0,n.kt)("p",null,"Generic sample data for relevant data objects is contained in the openAPI-specs of the respective services. This chapter\ncontains data structures that are more specifically designed for use in the Digital Twin Kit. They are compliant with\nthe base-specifications (like AAS) but restrict the application even further for use in this dataspace."),(0,n.kt)("h3",{id:"registration-at-edc"},"Registration at EDC"),(0,n.kt)("p",null,"While the exact integration with the EDC is still at the discretion of each Kit and use case, there are best-practices\nthat are likely to be standardized in the future. An example is HOW the EDC-shielded parts of this Kit should register\nwith the EDC Management API. Please note that these recommendations are based on the schemas of EDC v0.3.0. As the\nschema has changed in the meantime, an update will be provided when available. The current recommendation is:"),(0,n.kt)("h4",{id:"digital-twin-registry-as-edc-data-asset"},"Digital Twin Registry as EDC Data Asset"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n\xa0\xa0"asset": {\n\xa0\xa0\xa0\xa0"properties": {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"asset:prop:id": "<EDC_ASSET_ID>",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"asset:prop:type": "data.core.digitalTwinRegistry",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"asset:prop:name": "Digital Twin Registry Endpoint of provider XYZ",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"asset:prop:contenttype": "application/json",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"asset:prop:policy-id": "use-eu"\n\xa0\xa0\xa0\xa0}\n\xa0\xa0},\n\xa0\xa0"dataAddress": {\n\xa0\xa0\xa0\xa0"properties": {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"type": "HttpData",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"baseUrl": "https://<YOUR_DIGITAL_TWIN_REGISTRY_URL>",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"proxyPath": true,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"proxyBody": true,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"proxyMethod": true,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"proxyQueryParams": true \n\xa0\xa0\xa0\xa0}\n\xa0\xa0}\n}\n')),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"asset:prop:id")," describes the id of the Data Asset, not of any offered resources themselves. "),(0,n.kt)("h4",{id:"submodel-as-edc-data-asset"},"Submodel as EDC Data Asset"),(0,n.kt)("p",null,"How a Submodel server is offered as a Data Asset is not yet agreed and will be added here soon."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},"")),(0,n.kt)("h3",{id:"registration-at-digital-twin-registry"},"Registration at Digital Twin Registry"),(0,n.kt)("p",null,"The Submodel Descriptors in the DTR must not only follow the schema defined by the openAPI file. Additionally, it is\nimperative that the network mandates how they shall be populated with data. This is especially critical because the\ndata access is not straight-forward but passes through an EDC which the Data Consumer must negotiate with. That's why\nthe subprotocol body holds information on how to talk to the EDC's Data Plane."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n\xa0\xa0"id": "<unique ID of submodel>",\n\xa0\xa0"semanticId": {\n\xa0\xa0\xa0\xa0"type": "ExternalReference",\n\xa0\xa0\xa0\xa0"keys": [\n\xa0\xa0\xa0\xa0\xa0\xa0{\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"type": "GlobalReference",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"value": "urn:bamm:io.catenax.material_for_recycling:1.1.0#MaterialForRecycling"\n\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0]\n\xa0\xa0},\n\xa0\xa0"endpoints": {\n\xa0\xa0\xa0\xa0"protocolInformation": {\n\xa0\xa0\xa0\xa0\xa0\xa0"href": "https://edc.data.plane/<path>/submodel",\n\xa0\xa0\xa0\xa0\xa0\xa0"endpointProtocol": "HTTP",\n\xa0\xa0\xa0\xa0\xa0\xa0"endpointProtocolVersion": [\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"1.1"\n\xa0\xa0\xa0\xa0\xa0\xa0],\n\xa0\xa0\xa0\xa0\xa0\xa0"subprotocol": "DSP",\n\xa0\xa0\xa0\xa0\xa0\xa0"subprotocolBody": "<body with information required by subprotocol>",\n\xa0\xa0\xa0\xa0\xa0\xa0"subprotocolBodyEncoding": "plain",\n\xa0\xa0\xa0\xa0\xa0\xa0"securityAttributes": [\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"type": "NONE",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"key": "NONE",\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"value": "NONE"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0\xa0\xa0]\n\xa0\xa0\xa0\xa0},\n\xa0\xa0\xa0\xa0"interface": "SUBMODEL-3.0"\n\xa0\xa0}\n}\n')),(0,n.kt)("p",null,"Currently, this structure is still ambiguous (see ",(0,n.kt)("inlineCode",{parentName:"p"},"subprotocolBody"),") but will be subject to further standardization introducing\nmore clarity across use cases and Kits."),(0,n.kt)("h2",{id:"data-provisioning"},"Data Provisioning"),(0,n.kt)("h3",{id:"patterns"},"Patterns"),(0,n.kt)("p",null,"Data Providers will usually follow one of two patterns:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Digital Twin Repository: Deploying a dedicated Repository for the persistence of digital twins and related data is the most\nconvenient way to get going with the AAS. Due to the risk of data duplication and unclear initial ingestion mechanisms,\nit may not scale to industrial sizes."),(0,n.kt)("li",{parentName:"ol"},"Delegation: Wrapping another API or a database may deploy the Submodel API as a new facade. It delegates the incoming\nrequests to the respective backend systems. ")),(0,n.kt)("p",null,"Offering data to the network requires mappings that are naturally dependent on the data source format. More on data integration\ncan be found in the corresponding ",(0,n.kt)("a",{parentName:"p",href:"https://catena-x.net/fileadmin/user_upload/04_Einfuehren_und_umsetzen/Onboarding/DataIntegrationPatterns_Guide_Final_V1.pdf"},"CX e.V. guide"),"."),(0,n.kt)("h3",{id:"register-digital-twins"},"Register Digital Twins"),(0,n.kt)("p",null,"As mentioned in CX - 0002, every Data Provider is required not only to deploy a DTR in his infrastructure but also to\nregister each of the Submodels. Otherwise, the data will not be discoverable by Data Consumers."))}p.isMDXComponent=!0}}]);